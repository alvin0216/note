(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{682:function(t,s,e){"use strict";e.r(s);var a=e(6),r=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("主流的 TLS 1.2 版本所采用的方式为 "),e("strong",[t._v("ECDHE 握手")]),t._v("，除此外还有 "),e("strong",[t._v("RSA 握手")]),t._v("。本文主要讲主流的 ECDHE 握手过程。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("ECDHE 握手过程流程图")]),t._v(" "),e("th",[t._v("ECDHE 握手过程流程图 2")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("img",{attrs:{src:"https://alvin-cdn.oss-cn-shenzhen.aliyuncs.com/images/tsl12.png"}})]),t._v(" "),e("td",[e("img",{attrs:{src:"https://alvin-cdn.oss-cn-shenzhen.aliyuncs.com/images/tsl12-0.png"}})])])])]),t._v(" "),e("h2",{attrs:{id:"step-1-client-hello"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-1-client-hello"}},[t._v("#")]),t._v(" step 1: Client Hello")]),t._v(" "),e("ol",[e("li",[t._v("在 TCP 建立连接之后，浏览器会首先发一个“"),e("code",[t._v("Client Hello")]),t._v("”消息。里面有客户端的 TSL 版本号、支持的密码套件，还有一个随机数（"),e("strong",[t._v("Client Random），用于后续生成会话密钥")]),t._v("。")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("Handshake Protocol"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Client Hello\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("Version")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TLS")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.2")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x0303")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("Random")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 1cbf803321fd2623408dfe…\n    Cipher "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Suites")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),t._v(" suites"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        Cipher Suite"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xc02f")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        Cipher Suite"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xc030")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h2",{attrs:{id:"step-2-server-hello"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-2-server-hello"}},[t._v("#")]),t._v(" step 2: Server Hello")]),t._v(" "),e("p",[t._v("服务器收到“Client Hello”后，会返回一个“"),e("code",[t._v("Server Hello")]),t._v("”消息。把版本号对一下，也给出一个随机数（Server Random），然后从客户端的列表里选一个作为本次通信使用的密码套件，在这里它选择了“"),e("code",[t._v("TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384")]),t._v("”。")]),t._v(" "),e("p",[e("strong",[t._v("Server Random 也用于后续生成会话密钥。")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("Handshake Protocol"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Server Hello\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("Version")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TLS")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.2")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x0303")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("Random")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 0e6320f21bae50842e96…\n    Cipher Suite"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xc030")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("这个的意思就是：“版本号对上了，可以加密，你的密码套件挺多，我选一个最合适的吧，用椭圆曲线加 RSA、AES、SHA384。我也给你一个随机数，你也得留着。”")]),t._v(" "),e("p",[t._v("然后，服务器为了证明自己的身份，就把证书也发给了客户端（"),e("code",[t._v("Server Certificate")]),t._v("）。")]),t._v(" "),e("h2",{attrs:{id:"step-3-client-验证证书-生成-secret"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-3-client-验证证书-生成-secret"}},[t._v("#")]),t._v(" step 3: Client 验证证书，生成 secret")]),t._v(" "),e("p",[t._v("客户端验证服务端传来的证书和签名是否通过，如果验证通过，则传递 "),e("code",[t._v("client_params")]),t._v(" 这个参数给服务器。")]),t._v(" "),e("p",[t._v("接着客户端通过 ECDHE 算法计算出 pre_random，其中传入两个参数:server_params 和 client_params。现在你应该清楚这个两个参数的作用了吧，由于 ECDHE 基于椭圆曲线离散对数，这两个参数也称作椭圆曲线的公钥。")]),t._v(" "),e("p",[e("strong",[t._v("客户端现在拥有了 client_random、server_random 和 pre_random，接下来将这三个数通过一个伪随机数函数来计算出最终的 secret。")])]),t._v(" "),e("h2",{attrs:{id:"step4-server-生成-secret"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step4-server-生成-secret"}},[t._v("#")]),t._v(" step4: Server 生成 secret")]),t._v(" "),e("p",[t._v("刚刚客户端不是传了 client_params 过来了吗？")]),t._v(" "),e("p",[t._v("现在服务端开始用 ECDHE 算法生成 pre_random，接着用和客户端同样的伪随机数函数生成最后的 secret。")]),t._v(" "),e("h2",{attrs:{id:"rsa-握手和-ecdhe-握手的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rsa-握手和-ecdhe-握手的区别"}},[t._v("#")]),t._v(" RSA 握手和 ECDHE 握手的区别")]),t._v(" "),e("ol",[e("li",[t._v("ECDHE 握手，也就是主流的 TLS1.2 握手中，使用 ECDHE 实现 pre_random 的加密解密，没有用到 RSA。")]),t._v(" "),e("li",[t._v("使用了 ECDHE，客户端可以不用等到服务器发回“Finished”确认握手完毕立即就发出 HTTP 报文，省去了一个消息往返的时间浪费。这个叫“"),e("strong",[t._v("TLS False Start")]),t._v("”，意思就是“"),e("strong",[t._v("抢跑")]),t._v("”，和“TCP Fast Open”有点像，都是不等连接完全建立就提前发应用数据，提高传输的效率。")])])])}),[],!1,null,null,null);s.default=r.exports}}]);