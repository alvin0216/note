(window.webpackJsonp=window.webpackJsonp||[]).push([[107],{904:function(e,r,n){"use strict";n.r(r);var o=n(3),t=Object(o.a)({},(function(){var e=this,r=e.$createElement,n=e._self._c||r;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[n("a",{attrs:{href:"https://github.com/lerna/lerna",target:"_blank",rel:"noopener noreferrer"}},[e._v("lerna"),n("OutboundLink")],1)]),e._v(" "),n("details",{staticClass:"custom-block details"},[n("summary",[e._v("why lerna?")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://www.notion.so/lerna-46698561615e401bb0c354b6d80d3cba",target:"_blank",rel:"noopener noreferrer"}},[e._v("lerna 学习（一）思路篇"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://www.notion.so/lerna-b9fb718a0ce74664884ea61112938c91",target:"_blank",rel:"noopener noreferrer"}},[e._v("lerna 学习（二）"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://www.notion.so/lerna-b96d60a9f4494121990337b2b858870c",target:"_blank",rel:"noopener noreferrer"}},[e._v("lerna 学习（三）发布篇"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://mp.weixin.qq.com/s/6VXTi8utr5ig7VBfkJxttA",target:"_blank",rel:"noopener noreferrer"}},[e._v("源自 Babel 的多包管理工具：Lerna"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("lerna 是标准的 "),n("code",[e._v("mono-repo")]),e._v(" 的工具，与普遍的 "),n("code",[e._v("multi-repo")]),e._v(" 的组织架构有着显著的区别。")]),e._v(" "),n("p",[e._v("传统开发即是 multi-repo 的，即一个 module 一个仓库，比如公司内部提炼的常用工具、常用组件都是分开存放，开发的时候 install 在同一个项目里。")]),e._v(" "),n("p",[e._v("而 mono-repo 则是一个仓库包含整个项目的所有，分成多个 package 目录分开管理，统一处理相互依赖。比如 Babel、react、angular 等等知名的库都是采用了 mono-repo 的方式。比如 babel，babel-cli、babel-core、babel-node 等等工具都是放在了同一个仓库“babel”中的，而我们安装的时候实际上是 yarn add @babel/babel-core 这样的安装方式。这就是很典型的 mono-repo 的模式，整个 babel 的产品都内聚到了 babel 的整个仓库内。")]),e._v(" "),n("p",[n("strong",[e._v("mono-repo 的优点")])]),e._v(" "),n("ul",[n("li",[e._v("项目规范可以更轻松的整合;")]),e._v(" "),n("li",[e._v("模块间依赖稳定，统一更新，避免了开发人员相互间使用对方模块时版本更新不一致导致的 bug;")]),e._v(" "),n("li",[e._v("可以更高效的复用模块，加快开发效率;")]),e._v(" "),n("li",[e._v("各模块间相互依赖，开发又相对独立，避免对于特定项目的过强的耦合;")]),e._v(" "),n("li",[e._v("统一整合各个模块单独的更新生成一个 CHANGELOG;")]),e._v(" "),n("li",[e._v("唯一的仓库，避免用户 issue 的分散，以及 issue 的 scope 的不明确。")])]),e._v(" "),n("p",[n("strong",[e._v("mono-repo 的缺点")])]),e._v(" "),n("ul",[n("li",[e._v("仓库体积会非常的大;")]),e._v(" "),n("li",[e._v("统一 CHANGELOG 也会混入一些和整体项目无关的模块更新。")])])])])}),[],!1,null,null,null);r.default=t.exports}}]);