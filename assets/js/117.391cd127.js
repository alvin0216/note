(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{782:function(t,s,a){"use strict";a.r(s);var n=a(7),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),a("ul",[a("li",[t._v("基本数据类型："),a("code",[t._v("undefined")]),t._v("、"),a("code",[t._v("null")]),t._v("、"),a("code",[t._v("boolean")]),t._v("、"),a("code",[t._v("string")]),t._v("、"),a("code",[t._v("number")]),t._v("、"),a("code",[t._v("symbol")])]),t._v(" "),a("li",[t._v("引用类型："),a("code",[t._v("Object")]),t._v("、"),a("code",[t._v("Array")]),t._v("、"),a("code",[t._v("Date")]),t._v("、"),a("code",[t._v("RegExp")]),t._v("、"),a("code",[t._v("Function")])])]),t._v(" "),a("p",[t._v("区别在于基本数据类型存储于栈中，引用类型存储于堆中。")]),t._v(" "),a("p",[t._v("通用的判断方式是 "),a("code",[t._v("typeof")]),t._v(" 和 "),a("code",[t._v("instanceof")]),t._v("。然而有时候并不准确，比如")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'object'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("准确判断类型可以采用："),a("code",[t._v("Object.prototype.toString.call()")])])]),t._v(" "),a("h3",{attrs:{id:"为什么-typeof-null-会是-object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么-typeof-null-会是-object"}},[t._v("#")]),t._v(" 为什么 typeof null 会是 object？")]),t._v(" "),a("p",[t._v("js 在底层存储变量的时候，会在变量的机器码的低位 1-3 位存储其类型信息")]),t._v(" "),a("ul",[a("li",[t._v("000：对象")]),t._v(" "),a("li",[t._v("010：浮点数")]),t._v(" "),a("li",[t._v("100：字符串")]),t._v(" "),a("li",[t._v("110：布尔")]),t._v(" "),a("li",[t._v("1：整数")])]),t._v(" "),a("p",[t._v("对于 "),a("code",[t._v("undefined")]),t._v(" 和 "),a("code",[t._v("null")]),t._v(" 来说，这两个值的信息存储是有点特殊的。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("null")]),t._v("：所有机器码均为 0")]),t._v(" "),a("li",[a("code",[t._v("undefined")]),t._v("：用 −2^30 整数来表示")])]),t._v(" "),a("p",[t._v("因为机器码的缘故。所以才导致了这个问题的存在。这里仅做了解即可！了解更多请查阅 "),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN typeof"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"null-和-undefined-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#null-和-undefined-的区别"}},[t._v("#")]),t._v(" Null 和 undefined 的区别")]),t._v(" "),a("p",[t._v("这里可以看 "),a("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("阮一峰 undefined 与 null 的区别"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("这里简单做阐述："),a("code",[t._v("null")]),t._v(" 表示此处没值，而"),a("code",[t._v("undefined")]),t._v(" 表示未定义，所以有：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"隐式转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#隐式转换"}},[t._v("#")]),t._v(" 隐式转换")]),t._v(" "),a("p",[t._v("js 中一个难点就是 js 隐形转换，因为 js 在一些操作符下其类型会做一些变化，所以 js 灵活，同时造成易出错，并且难以理解。")]),t._v(" "),a("p",[t._v("涉及隐式转换最多的两个运算符 "),a("code",[t._v("+")]),t._v(" 和 "),a("code",[t._v("==")]),t._v("。")]),t._v(" "),a("ul",[a("li",[a("strong",[a("code",[t._v("+")]),t._v(" 运算符即可数字相加，也可以字符串相加。")])]),t._v(" "),a("li",[a("strong",[a("code",[t._v("==")]),t._v(" 不同于 "),a("code",[t._v("===")]),t._v(" ，故也存在隐式转换。")])]),t._v(" "),a("li",[a("strong",[a("code",[t._v("- * /")]),t._v(" 这些运算符只会针对 "),a("code",[t._v("number")]),t._v(" 类型，故转换的结果只能是转换成 "),a("code",[t._v("number")]),t._v(" 类型。")])])]),t._v(" "),a("p",[t._v("隐式转换中主要涉及到三种转换：")]),t._v(" "),a("ol",[a("li",[t._v("将值转为原始值，"),a("code",[t._v("ToPrimitive()")]),t._v("。")]),t._v(" "),a("li",[t._v("将值转为数字，"),a("code",[t._v("ToNumber()")]),t._v("。")]),t._v(" "),a("li",[t._v("将值转为字符串，"),a("code",[t._v("ToString()")]),t._v("。")])]),t._v(" "),a("h3",{attrs:{id:"通过-toprimitive-将值转换为原始值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过-toprimitive-将值转换为原始值"}},[t._v("#")]),t._v(" 通过 ToPrimitive 将值转换为原始值")]),t._v(" "),a("p",[t._v("js 引擎内部的抽象操作 "),a("code",[t._v("ToPrimitive")]),t._v(" 有着这样的签名："),a("code",[t._v("ToPrimitive(input, PreferredType?)")])]),t._v(" "),a("p",[a("code",[t._v("input")]),t._v(" 是要转换的值，"),a("code",[t._v("PreferredType")]),t._v(" 是可选参数，可以是 "),a("code",[t._v("Number")]),t._v(" 或 "),a("code",[t._v("String")]),t._v(" 类型。他只是一个转换标志，转化后的结果并不一定是这个参数所值的类型，但是转换结果一定是一个原始值（或者报错）。")]),t._v(" "),a("h4",{attrs:{id:"如果-preferredtype-被标记为-number-则会进行下面的操作流程来转换输入的值。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如果-preferredtype-被标记为-number-则会进行下面的操作流程来转换输入的值。"}},[t._v("#")]),t._v(" 如果 PreferredType 被标记为 Number，则会进行下面的操作流程来转换输入的值。")]),t._v(" "),a("ol",[a("li",[t._v("如果输入的值已经是一个原始值，则直接返回它")]),t._v(" "),a("li",[t._v("否则，如果输入的值是一个对象，则调用该对象的 "),a("code",[t._v("valueOf()")]),t._v(" 方法，如果 "),a("code",[t._v("valueOf()")]),t._v(" 方法的返回值是一个原始值，则返回这个原始值。")]),t._v(" "),a("li",[t._v("否则，调用这个对象的 "),a("code",[t._v("toString()")]),t._v(" 方法，如果 "),a("code",[t._v("toString()")]),t._v(" 方法返回的是一个原始值，则返回这个原始值。")]),t._v(" "),a("li",[t._v("否则，抛出 "),a("code",[t._v("TypeError")]),t._v(" 异常。")])]),t._v(" "),a("h4",{attrs:{id:"如果-preferredtype-被标记为-string-则会进行下面的操作流程来转换输入的值。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如果-preferredtype-被标记为-string-则会进行下面的操作流程来转换输入的值。"}},[t._v("#")]),t._v(" 如果 PreferredType 被标记为 String，则会进行下面的操作流程来转换输入的值。")]),t._v(" "),a("ol",[a("li",[t._v("如果输入的值已经是一个原始值，则直接返回它")]),t._v(" "),a("li",[t._v("否则，调用这个对象的 "),a("code",[t._v("toString()")]),t._v(" 方法，如果 toString()方法返回的是一个原始值，则返回这个原始值。")]),t._v(" "),a("li",[t._v("否则，如果输入的值是一个对象，则调用该对象的 "),a("code",[t._v("valueOf()")]),t._v(" 方法，如果 "),a("code",[t._v("valueOf()")]),t._v(" 方法的返回值是一个原始值，则返回这个原始值。")]),t._v(" "),a("li",[t._v("否则，抛出 TypeError 异常。")])]),t._v(" "),a("p",[t._v("既然 "),a("code",[t._v("PreferredType")]),t._v(" 是可选参数，那么如果没有这个参数时，怎么转换呢？"),a("code",[t._v("PreferredType")]),t._v(" 的值会按照这样的规则来自动设置：")]),t._v(" "),a("ol",[a("li",[t._v("该对象为 "),a("code",[t._v("Date")]),t._v(" 类型，则 "),a("code",[t._v("PreferredType")]),t._v(" 被设置为 "),a("code",[t._v("String")])]),t._v(" "),a("li",[t._v("否则，"),a("code",[t._v("PreferredType")]),t._v(" 被设置为 "),a("code",[t._v("Number")])])]),t._v(" "),a("h4",{attrs:{id:"tostring-和-valueof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tostring-和-valueof"}},[t._v("#")]),t._v(" toString 和 valueOf")]),t._v(" "),a("p",[t._v("那这两个方法在对象里是否一定存在呢？答案是肯定的。在控制台输出 "),a("code",[t._v("Object.prototype")]),t._v("，你会发现其中就有 "),a("code",[t._v("valueOf")]),t._v(" 和 "),a("code",[t._v("toString")]),t._v(" 方法，而 "),a("code",[t._v("Object.prototype")]),t._v(" 是所有对象原型链顶层原型，所有对象都会继承该原型的方法，故任何对象都会有 "),a("code",[t._v("valueOf")]),t._v(" 和 "),a("code",[t._v("toString")]),t._v(" 方法。")]),t._v(" "),a("p",[t._v("先看看对象的 "),a("code",[t._v("valueOf")]),t._v(" 函数，其转换结果是什么？对于 js 的常见内置对象："),a("code",[t._v("Date")]),t._v(", "),a("code",[t._v("Array")]),t._v(", "),a("code",[t._v("Math")]),t._v(", "),a("code",[t._v("Number")]),t._v(", "),a("code",[t._v("Boolean")]),t._v(", "),a("code",[t._v("String")]),t._v(", "),a("code",[t._v("Array")]),t._v(", "),a("code",[t._v("RegExp")]),t._v(", "),a("code",[t._v("Function")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Number、Boolean、String这三种构造函数生成的基础值的对象形式，")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// === 通过 valueOf 转换后会变成相应的原始值 ===")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nnum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 123")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'12df'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '12df'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" bool "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fd'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Date特殊的对象，其原型Date.prototype上内置的valueOf函数将日期转换为日期的毫秒的形式的数值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1515143895500")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 除此之外返回的都为this，即对象本身")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Array")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[t._v("再来看看 "),a("code",[t._v("toString")]),t._v(" 函数，其转换结果是什么")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123sd'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nnum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'NaN'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'12df'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '12df'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" bool "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fd'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'true'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Array")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\narr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '1,2'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" d "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "Wed Oct 11 2017 08:00:00 GMT+0800 (中国标准时间)"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfunc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "function () {}"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 除这些对象及其实例化对象之外，其他对象返回的都是该对象的类型")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "[object Object]"')]),t._v("\n\nMath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "[object Math]"')]),t._v("\n")])])]),a("p",[t._v("从上面 valueOf 和 toString 两个函数对对象的转换可以看出为什么对于 ToPrimitive(input, PreferredType?)，PreferredType 没有设定的时候，除了 Date 类型，PreferredType 被设置为 String，其它的会设置成 Number。")]),t._v(" "),a("p",[t._v("因为 valueOf 函数会将 Number、String、Boolean 基础类型的对象类型值转换成 基础类型，Date 类型转换为毫秒数，其它的返回对象本身，而 toString 方法会将所有对象转换为字符串。显然对于大部分对象转换，valueOf 转换更合理些，因为并没有规定转换类型，应该尽可能保持原有值，而不应该想 toString 方法一样，一股脑将其转换为字符串。")]),t._v(" "),a("p",[t._v("所以对于没有指定 PreferredType 类型时，先进行 valueOf 方法转换更好，故将 PreferredType 设置为 Number 类型。")]),t._v(" "),a("p",[t._v("而对于 Date 类型，其进行 valueOf 转换为毫秒数的 number 类型。在进行隐式转换时，没有指定将其转换为 number 类型时，将其转换为那么大的 number 类型的值显然没有多大意义。（不管是在+运算符还是==运算符）还不如转换为字符串格式的日期，所以默认 Date 类型会优先进行 toString 转换。故有以上的规则：")]),t._v(" "),a("p",[t._v("PreferredType 没有设置时，Date 类型的对象，PreferredType 默认设置为 String，其他类型对象 PreferredType 默认设置为 Number。")]),t._v(" "),a("h3",{attrs:{id:"通过-tonumber-将值转换为数字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过-tonumber-将值转换为数字"}},[t._v("#")]),t._v(" 通过 ToNumber 将值转换为数字")]),t._v(" "),a("p",[t._v("根据参数类型进行下面转换：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("参数")]),t._v(" "),a("th",[t._v("结果")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("undefined")]),t._v(" "),a("td",[t._v("NaN")])]),t._v(" "),a("tr",[a("td",[t._v("null")]),t._v(" "),a("td",[t._v("+0")])]),t._v(" "),a("tr",[a("td",[t._v("布尔值")]),t._v(" "),a("td",[t._v("true 转换 1，false 转换为+0")])]),t._v(" "),a("tr",[a("td",[t._v("数字")]),t._v(" "),a("td",[t._v("无须转换")])]),t._v(" "),a("tr",[a("td",[t._v("字符串")]),t._v(" "),a("td",[t._v("有字符串解析为数字，例如：‘324’转换为 324，‘qwer’转换为 NaN")])]),t._v(" "),a("tr",[a("td",[t._v("对象(obj)")]),t._v(" "),a("td",[t._v("先进行 ToPrimitive(obj, Number)转换得到原始值，在进行 ToNumber 转换为数字")])])])]),t._v(" "),a("h3",{attrs:{id:"通过-tostring-将值转换为字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过-tostring-将值转换为字符串"}},[t._v("#")]),t._v(" 通过 ToString 将值转换为字符串")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("参数")]),t._v(" "),a("th",[t._v("结果")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("undefined")]),t._v(" "),a("td",[t._v("'undefined'")])]),t._v(" "),a("tr",[a("td",[t._v("null")]),t._v(" "),a("td",[t._v("'null'")])]),t._v(" "),a("tr",[a("td",[t._v("布尔值")]),t._v(" "),a("td",[t._v("转换为'true' 或 'false'")])]),t._v(" "),a("tr",[a("td",[t._v("数字")]),t._v(" "),a("td",[t._v("数字转换字符串，比如：1.765 转为'1.765'")])]),t._v(" "),a("tr",[a("td",[t._v("字符串")]),t._v(" "),a("td",[t._v("无须转换")])]),t._v(" "),a("tr",[a("td",[t._v("对象(obj)")]),t._v(" "),a("td",[t._v("先进行 ToPrimitive(obj, String)转换得到原始值，在进行 ToString 转换为字符串")])])])]),t._v(" "),a("p",[t._v("讲了这么多，是不是还不是很清晰，先来看看一个例子：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"},[t._v("ans")]),a("p",[t._v("两个对象的值进行+运算符，肯定要先进行隐式转换为原始类型才能进行计算。")]),t._v(" "),a("ol",[a("li",[t._v("进行 ToPrimitive 转换，由于没有指定 PreferredType 类型，{}会使默认值为 Number，进行 ToPrimitive(input, Number)运算。")]),t._v(" "),a("li",[t._v("所以会执行 valueOf 方法，({}).valueOf(),返回的还是{}对象，不是原始值。")]),t._v(" "),a("li",[t._v('继续执行 toString 方法，({}).toString(),返回"[object Object]"，是原始值。')])]),t._v(" "),a("p",[t._v("故得到最终的结果，"),a("code",[t._v('"[object Object]" + "[object Object]" = "[object Object][object object]"')])])]),a("p",[t._v("再来一个指定类型的例子：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"},[t._v("ans")]),a("ol",[a("li",[t._v("首先*运算符只能对 number 类型进行运算，故第一步就是对{}进行 ToNumber 类型转换。")]),t._v(" "),a("li",[t._v("由于{}是对象类型，故先进行原始类型转换，ToPrimitive(input, Number)运算。")]),t._v(" "),a("li",[t._v("所以会执行 valueOf 方法，({}).valueOf(),返回的还是{}对象，不是原始值。")]),t._v(" "),a("li",[t._v('继续执行 toString 方法，({}).toString(),返回"[object Object]"，是原始值。')]),t._v(" "),a("li",[t._v('转换为原始值后再进行 ToNumber 运算，"[object Object]"就转换为 NaN。')])]),t._v(" "),a("p",[t._v("故最终的结果为 "),a("code",[t._v("2 * NaN = NaN")])])]),a("h2",{attrs:{id:"运算符隐式转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算符隐式转换"}},[t._v("#")]),t._v(" == 运算符隐式转换")]),t._v(" "),a("p",[t._v("略 详见 - "),a("a",{attrs:{href:"https://juejin.im/post/6844903557968166926",target:"_blank",rel:"noopener noreferrer"}},[t._v("你所忽略的 js 隐式转换"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=e.exports}}]);