(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{608:function(t,s,n){"use strict";n.r(s);var a=n(4),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/2",target:"_blank",rel:"noopener noreferrer"}},[t._v("冴羽 JavaScript 深入之从原型到原型链"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://juejin.cn/post/6844903976907997192",target:"_blank",rel:"noopener noreferrer"}},[t._v("【重点】图解：告诉面试官什么是 JS 原型和原型链?"),n("OutboundLink")],1)])]),t._v(" "),n("p",[t._v("通常 Java 生成对象是通过 new 的方式，通过类生成一个实例对象的过程。但是 JS 中并没有类，那 JS 的设计者要怎么做？")]),t._v(" "),n("p",[t._v("Java 的 new 的过程内部其实调用了"),n("strong",[t._v("构造函数")]),t._v("。但是 JS 是没有“类”的概念的，于是 JS 就把 new 一个“类”设计成了 new 一个"),n("strong",[t._v("构造函数")]),t._v("，于是构造函数成为了一个实例对象的"),n("strong",[t._v("原型对象")]),t._v("。")]),t._v(" "),n("blockquote",[n("p",[t._v("JS 声明构造函数(用来实例化对象的函数)时，会在内存中创建一个对应的对象，这个对象就是原函数的原型。构造函数默认有一个 "),n("code",[t._v("prototype")]),t._v(" 属性，"),n("code",[t._v("prototype")]),t._v(" 的值指向函数的原型。同时原型中也有一个 "),n("code",[t._v("constructor")]),t._v(" 属性，"),n("code",[t._v("constructor")]),t._v(" 的值指向函数对象。\n通过构造函数实例化出来的对象，并不具有 "),n("code",[t._v("prototype")]),t._v(" 属性，其默认有一个 "),n("code",[t._v("__proto__")]),t._v(" 属性，"),n("code",[t._v("__proto__")]),t._v(" 的值指向构造函数的原型。在原型对象上添加或修改的属性，在所有实例化出的对象上都可共享。")])]),t._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/alvin0216/cdn/raw/master/images/prototype5.png",alt:""}})]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'run Person'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" p "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 构造函数、实例原型、和实例之间的关系")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v(" Person 指代构造函数\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype 指向原型对象\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),t._v(" p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype 实例通过 __proto__ （原型链）指向原型\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);