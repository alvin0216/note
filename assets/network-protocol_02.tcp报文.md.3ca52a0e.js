import{_ as e,o as a,c as o,Q as t}from"./chunks/framework.2c915ec2.js";const _=JSON.parse('{"title":"TCP 报文结构","description":"","frontmatter":{"title":"TCP 报文结构","date":"2018-09-28T13:00:28.000Z","sidebar":"auto","tags":["tcp"],"categories":["网络协议"]},"headers":[],"relativePath":"network-protocol/02.tcp报文.md","lastUpdated":1716905716000}'),c={name:"network-protocol/02.tcp报文.md"},r=t('<p>TCP 报文是 TCP 层传输的数据单元，也叫报文段。</p><p><img src="https://alvin-cdn.oss-cn-shenzhen.aliyuncs.com/images/tcp-structure.png" alt=""></p><h2 id="源端口、目标端口" tabindex="-1">源端口、目标端口 <a class="header-anchor" href="#源端口、目标端口" aria-label="Permalink to &quot;源端口、目标端口&quot;">​</a></h2><p>如何标识唯一标识一个连接？答案是 TCP 连接的四元组——源 <strong>IP、源端口、目标 IP 和目标端口。</strong></p><p>那 TCP 报文怎么没有源 IP 和目标 IP 呢？这是因为在 IP 层就已经处理了 IP 。TCP 只需要记录两者的端口即可。</p><h2 id="序列号" tabindex="-1">序列号 <a class="header-anchor" href="#序列号" aria-label="Permalink to &quot;序列号&quot;">​</a></h2><p>即 <code>Sequence number</code>, 指的是本报文段第一个字节的序列号。</p><p>序列号在 TCP 通信的过程中有两个作用:</p><ul><li>在 SYN 报文中交换彼此的初始序列号。</li><li>保证数据包按正确的顺序组装。</li></ul><h2 id="isn" tabindex="-1">ISN <a class="header-anchor" href="#isn" aria-label="Permalink to &quot;ISN&quot;">​</a></h2><p>即 <code>Initial Sequence Number</code>（初始序列号）,在三次握手的过程当中，双方会用过 SYN 报文来交换彼此的 ISN。</p><p>ISN 并不是一个固定的值，而是每 4 ms 加一，溢出则回到 0，这个算法使得猜测 ISN 变得很困难。那为什么要这么做？</p><p>如果 ISN 被攻击者预测到，要知道源 IP 和源端口号都是很容易伪造的，当攻击者猜测 ISN 之后，直接伪造一个 RST 后，就可以强制连接关闭的，这是非常危险的。</p><p>而动态增长的 ISN 大大提高了猜测 ISN 的难度。</p><h2 id="确认号" tabindex="-1">确认号 <a class="header-anchor" href="#确认号" aria-label="Permalink to &quot;确认号&quot;">​</a></h2><p>即 <code>ACK</code>(Acknowledgment number)。用来告知对方下一个期望接收的序列号，小于 ACK 的所有字节已经全部收到。</p><h2 id="标记位" tabindex="-1">标记位 <a class="header-anchor" href="#标记位" aria-label="Permalink to &quot;标记位&quot;">​</a></h2><p>常见的标记位有 <code>SYN</code>,<code>ACK</code>,<code>FIN</code>,<code>RST</code>,<code>PSH</code>。</p><p><code>SYN</code> 和 <code>ACK</code> 已经在上文说过，后三个解释如下: FIN： 即 Finish，表示发送方准备断开连接。</p><p><code>RST</code>：即 <code>Reset</code>，用来强制断开连接。</p><p><code>PSH</code>： 即 <code>Push</code>, 告知对方这些数据包收到后应该马上交给上层的应用，不能缓存。</p><h2 id="窗口大小" tabindex="-1">窗口大小 <a class="header-anchor" href="#窗口大小" aria-label="Permalink to &quot;窗口大小&quot;">​</a></h2><p>占用两个字节，也就是 16 位，但实际上是不够用的。因此 TCP 引入了窗口缩放的选项，作为窗口缩放的比例因子，这个比例因子的范围在 0 ~ 14，比例因子可以将窗口的值扩大为原来的 2 ^ n 次方。</p><h2 id="校验和" tabindex="-1">校验和 <a class="header-anchor" href="#校验和" aria-label="Permalink to &quot;校验和&quot;">​</a></h2><p>占用两个字节，防止传输过程中数据包有损坏，如果遇到校验和有差错的报文，TCP 直接丢弃之，等待重传。</p><h2 id="可选项" tabindex="-1">可选项 <a class="header-anchor" href="#可选项" aria-label="Permalink to &quot;可选项&quot;">​</a></h2><p>可选项的格式如下:</p><p><img src="https://alvin-cdn.oss-cn-shenzhen.aliyuncs.com/images/tcp-structure2.png" alt=""></p><p>常用的可选项有以下几个:</p><ul><li>TimeStamp: TCP 时间戳，后面详细介绍。</li><li>MSS: 指的是 TCP 允许的从对方接收的最大报文段。</li><li>SACK: 选择确认选项。</li><li>Window Scale： 窗口缩放选项。</li></ul>',30),i=[r];function d(n,l,p,s,h,u){return a(),o("div",null,i)}const S=e(c,[["render",d]]);export{_ as __pageData,S as default};
