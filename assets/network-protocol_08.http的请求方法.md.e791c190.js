import{_ as t,o as s,c as a,Q as n}from"./chunks/framework.2c915ec2.js";const C=JSON.parse('{"title":"如何理解 HTTP 的请求方法？","description":"","frontmatter":{"title":"如何理解 HTTP 的请求方法？","date":"2018-09-19T13:00:28.000Z","sidebar":"auto","tags":["http"],"categories":["网络协议"]},"headers":[],"relativePath":"network-protocol/08.http的请求方法.md","lastUpdated":1716905716000}'),o={name:"network-protocol/08.http的请求方法.md"},e=n(`<table><thead><tr><th>请求方法</th><th>作用</th></tr></thead><tbody><tr><td><code>GET</code></td><td>通常用于请求服务器发送某些资源</td></tr><tr><td><code>HEAD</code></td><td>请求资源的头部信息, 并且这些头部与 HTTP GET 方法请求时返回的一致. 该请求方法的一个使用场景是在下载一个大文件前先获取其大小再决定是否要下载, 以此可以节约带宽资源</td></tr><tr><td><code>OPTIONS</code></td><td>用于获取目的资源所支持的通信选项</td></tr><tr><td><code>POST</code></td><td>发送数据给服务器</td></tr><tr><td><code>PUT</code></td><td>用于新增资源或者使用请求中的有效负载替换目标资源的表现形式</td></tr><tr><td><code>DELETE</code></td><td>用于删除指定的资源</td></tr><tr><td><code>PATCH</code></td><td>用于对资源进行部分修改</td></tr><tr><td><code>CONNECT</code></td><td>HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器</td></tr><tr><td><code>TRACE</code></td><td>回显服务器收到的请求，主要用于测试或诊断</td></tr></tbody></table><h2 id="get-和-post-有什么区别" tabindex="-1">GET 和 POST 有什么区别？ <a class="header-anchor" href="#get-和-post-有什么区别" aria-label="Permalink to &quot;GET 和 POST 有什么区别？&quot;">​</a></h2><table><thead><tr><th>角度</th><th>描述</th></tr></thead><tbody><tr><td><strong>缓存</strong></td><td>GET 请求会被浏览器主动缓存下来，留下历史记录，而 POST 默认不会。</td></tr><tr><td><strong>编码</strong></td><td>GET 只能进行 URL 编码，只能接收 ASCII 字符，而 POST 没有限制。</td></tr><tr><td><strong>参数</strong></td><td>GET 一般放在 URL 中，因此不安全，POST 放在请求体中，更适合传输敏感信息。</td></tr><tr><td><strong>幂等性</strong></td><td>GET 是幂等的，而 POST 不是。</td></tr></tbody></table><details class="details custom-block"><summary>什么是幂等？</summary><p>幂等的概念是指同一个请求方法执行多次和仅执行一次的效果完全相同。</p><p>比如 get 获取资源，get 几次都不会服务器都不会发生变化，而 POST 上传数据，会新增资源。</p><ul><li>按照 RFC 里的语义，POST 是“新增或提交数据”，多次提交数据会创建多个资源，所以不是幂等的；</li><li>而 PUT 是“替换或更新数据”，多次更新一个资源，资源还是会第一次更新的状态，所以是幂等的。</li></ul></details><h2 id="put-和-post-都是给服务器发送新增资源-有什么区别" tabindex="-1">PUT 和 POST 都是给服务器发送新增资源，有什么区别？ <a class="header-anchor" href="#put-和-post-都是给服务器发送新增资源-有什么区别" aria-label="Permalink to &quot;PUT 和 POST 都是给服务器发送新增资源，有什么区别？&quot;">​</a></h2><p>PUT 和 POST 方法的区别是,PUT 方法是幂等的：连续调用一次或者多次的效果相同（无副作用），而 POST 方法是非幂等的。</p><p>『POST 表示创建资源，PUT 表示更新资源』这种说法是错误的，两个都能创建资源，根本区别就在于幂等性</p><h2 id="put-和-patch-都是给服务器发送修改资源-有什么区别" tabindex="-1">PUT 和 PATCH 都是给服务器发送修改资源，有什么区别？ <a class="header-anchor" href="#put-和-patch-都是给服务器发送修改资源-有什么区别" aria-label="Permalink to &quot;PUT 和 PATCH 都是给服务器发送修改资源，有什么区别？&quot;">​</a></h2><p>PUT 和 PATCH 都是更新资源，<strong>而 PATCH 用来对已知资源进行局部更新</strong>。</p><p>比如我们修改个人信息</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">alvin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">age</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">18</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>我们要修改年龄时</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 使用 PUT 覆盖资源</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;alvin&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 使用 PATCH 局部更新</span></span>
<span class="line"><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,13),l=[e];function p(r,c,d,i,T,D){return s(),a("div",null,l)}const h=t(o,[["render",p]]);export{C as __pageData,h as default};
