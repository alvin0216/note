import{_ as t,o as a,c as e,N as o}from"./chunks/framework.208f6f3f.js";const T=JSON.parse('{"title":"网络模型","description":"","frontmatter":{"title":"网络模型","date":"2018-09-28T18:00:28.000Z","sidebar":"auto","tags":["http"],"categories":["网络协议"]},"headers":[],"relativePath":"network-protocol/01.网络模型.md","lastUpdated":1681197872000}'),r={name:"network-protocol/01.网络模型.md"},c=o('<p>数据链路层（mac） -&gt; 网络层（IP）-&gt; 传输层（TCP/UDP）-&gt; 应用层（HTTP、SMTP、FTP）</p><p><img src="https://alvin-cdn.oss-cn-shenzhen.aliyuncs.com/images/network-model.png" alt=""></p><h2 id="数据链路层-mac" tabindex="-1">数据链路层(Mac) <a class="header-anchor" href="#数据链路层-mac" aria-label="Permalink to &quot;数据链路层(Mac)&quot;">​</a></h2><p>负责在以太网、WiFi 这样的底层网络上发送原始数据包，工作在网卡这个层次，使用 <code>MAC</code> 地址来标记网络上的设备，所以有时候也叫 <code>MAC</code> 层。</p><h2 id="网络层-ip" tabindex="-1">网络层(IP) <a class="header-anchor" href="#网络层-ip" aria-label="Permalink to &quot;网络层(IP)&quot;">​</a></h2><p>IP 协议就处在这一层。因为 IP 协议定义了“IP 地址”的概念，所以就可以在“链接层”的基础上，用 IP 地址取代 MAC 地址，把许许多多的局域网、广域网连接成一个虚拟的巨大网络，在这个网络里找设备时只要把 IP 地址再“翻译”成 MAC 地址就可以了。</p><h2 id="传输层-tcp-udp" tabindex="-1">传输层(TCP/UDP) <a class="header-anchor" href="#传输层-tcp-udp" aria-label="Permalink to &quot;传输层(TCP/UDP)&quot;">​</a></h2><p>传输层负责为两台主机中的进程提供通信服务，它使用 16 位的端口号来标识端口，当两个计算机中的进程要进行通讯时，除了要知道对方的 IP 地址外，还需要知道对方的端口。该层主要有以下两个协议：用户数据报协议（UDP，User Datagram Protocol）和传输控制协议（TCP，Transmission Control Protocol）：</p><h2 id="应用层-http-smtp-ftp" tabindex="-1">应用层(HTTP/SMTP/FTP...) <a class="header-anchor" href="#应用层-http-smtp-ftp" aria-label="Permalink to &quot;应用层(HTTP/SMTP/FTP...)&quot;">​</a></h2><p>由于下面的三层把基础打得非常好，所以在这一层就“百花齐放”了，有各种面向具体应用的协议。例如 Telnet、SSH、FTP、SMTP 等等，当然还有我们的 HTTP。</p><p>相关链接 <a href="https://juejin.im/post/6844904049800642568" target="_blank" rel="noreferrer">详解 四层、五层、七层 计算机网络模型</a></p>',11),s=[c];function n(p,i,l,P,d,_){return a(),e("div",null,s)}const m=t(r,[["render",n]]);export{T as __pageData,m as default};
