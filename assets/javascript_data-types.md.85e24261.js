import{_ as s,o as a,c as n,N as o}from"./chunks/framework.208f6f3f.js";const C=JSON.parse('{"title":"隐式转换","description":"","frontmatter":{"title":"隐式转换","date":"2019-07-15T13:00:28.000Z","sidebar":"auto","tags":["Javascript"],"categories":["Javascript"]},"headers":[],"relativePath":"javascript/data-types.md","lastUpdated":1681197312000}'),l={name:"javascript/data-types.md"},e=o(`<h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><ul><li>基本数据类型：<code>undefined</code>、<code>null</code>、<code>boolean</code>、<code>string</code>、<code>number</code>、<code>symbol</code></li><li>引用类型：<code>Object</code>、<code>Array</code>、<code>Date</code>、<code>RegExp</code>、<code>Function</code></li></ul><p>区别在于基本数据类型存储于栈中，引用类型存储于堆中。</p><p>通用的判断方式是 <code>typeof</code> 和 <code>instanceof</code>。然而有时候并不准确，比如</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">object</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><blockquote><p>准确判断类型可以采用：<code>Object.prototype.toString.call()</code></p></blockquote><h3 id="为什么-typeof-null-会是-object" tabindex="-1">为什么 typeof null 会是 object？ <a class="header-anchor" href="#为什么-typeof-null-会是-object" aria-label="Permalink to &quot;为什么 typeof null 会是 object？&quot;">​</a></h3><p>js 在底层存储变量的时候，会在变量的机器码的低位 1-3 位存储其类型信息</p><ul><li>000：对象</li><li>010：浮点数</li><li>100：字符串</li><li>110：布尔</li><li>1：整数</li></ul><p>对于 <code>undefined</code> 和 <code>null</code> 来说，这两个值的信息存储是有点特殊的。</p><ul><li><code>null</code>：所有机器码均为 0</li><li><code>undefined</code>：用 −2^30 整数来表示</li></ul><p>因为机器码的缘故。所以才导致了这个问题的存在。这里仅做了解即可！了解更多请查阅 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof" target="_blank" rel="noreferrer">MDN typeof</a></p><h3 id="null-和-undefined-的区别" tabindex="-1">Null 和 undefined 的区别 <a class="header-anchor" href="#null-和-undefined-的区别" aria-label="Permalink to &quot;Null 和 undefined 的区别&quot;">​</a></h3><p>这里可以看 <a href="http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html" target="_blank" rel="noreferrer">阮一峰 undefined 与 null 的区别</a></p><p>这里简单做阐述：<code>null</code> 表示此处没值，而<code>undefined</code> 表示未定义，所以有：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NaN;</span></span>
<span class="line"></span></code></pre></div><h2 id="隐式转换" tabindex="-1">隐式转换 <a class="header-anchor" href="#隐式转换" aria-label="Permalink to &quot;隐式转换&quot;">​</a></h2><p>js 中一个难点就是 js 隐形转换，因为 js 在一些操作符下其类型会做一些变化，所以 js 灵活，同时造成易出错，并且难以理解。</p><p>涉及隐式转换最多的两个运算符 <code>+</code> 和 <code>==</code>。</p><ul><li><strong><code>+</code> 运算符即可数字相加，也可以字符串相加。</strong></li><li><strong><code>==</code> 不同于 <code>===</code> ，故也存在隐式转换。</strong></li><li><strong><code>- * /</code> 这些运算符只会针对 <code>number</code> 类型，故转换的结果只能是转换成 <code>number</code> 类型。</strong></li></ul><p>隐式转换中主要涉及到三种转换：</p><ol><li>将值转为原始值，<code>ToPrimitive()</code>。</li><li>将值转为数字，<code>ToNumber()</code>。</li><li>将值转为字符串，<code>ToString()</code>。</li></ol><h3 id="通过-toprimitive-将值转换为原始值" tabindex="-1">通过 ToPrimitive 将值转换为原始值 <a class="header-anchor" href="#通过-toprimitive-将值转换为原始值" aria-label="Permalink to &quot;通过 ToPrimitive 将值转换为原始值&quot;">​</a></h3><p>js 引擎内部的抽象操作 <code>ToPrimitive</code> 有着这样的签名：<code>ToPrimitive(input, PreferredType?)</code></p><p><code>input</code> 是要转换的值，<code>PreferredType</code> 是可选参数，可以是 <code>Number</code> 或 <code>String</code> 类型。他只是一个转换标志，转化后的结果并不一定是这个参数所值的类型，但是转换结果一定是一个原始值（或者报错）。</p><h4 id="如果-preferredtype-被标记为-number-则会进行下面的操作流程来转换输入的值。" tabindex="-1">如果 PreferredType 被标记为 Number，则会进行下面的操作流程来转换输入的值。 <a class="header-anchor" href="#如果-preferredtype-被标记为-number-则会进行下面的操作流程来转换输入的值。" aria-label="Permalink to &quot;如果 PreferredType 被标记为 Number，则会进行下面的操作流程来转换输入的值。&quot;">​</a></h4><ol><li>如果输入的值已经是一个原始值，则直接返回它</li><li>否则，如果输入的值是一个对象，则调用该对象的 <code>valueOf()</code> 方法，如果 <code>valueOf()</code> 方法的返回值是一个原始值，则返回这个原始值。</li><li>否则，调用这个对象的 <code>toString()</code> 方法，如果 <code>toString()</code> 方法返回的是一个原始值，则返回这个原始值。</li><li>否则，抛出 <code>TypeError</code> 异常。</li></ol><h4 id="如果-preferredtype-被标记为-string-则会进行下面的操作流程来转换输入的值。" tabindex="-1">如果 PreferredType 被标记为 String，则会进行下面的操作流程来转换输入的值。 <a class="header-anchor" href="#如果-preferredtype-被标记为-string-则会进行下面的操作流程来转换输入的值。" aria-label="Permalink to &quot;如果 PreferredType 被标记为 String，则会进行下面的操作流程来转换输入的值。&quot;">​</a></h4><ol><li>如果输入的值已经是一个原始值，则直接返回它</li><li>否则，调用这个对象的 <code>toString()</code> 方法，如果 toString()方法返回的是一个原始值，则返回这个原始值。</li><li>否则，如果输入的值是一个对象，则调用该对象的 <code>valueOf()</code> 方法，如果 <code>valueOf()</code> 方法的返回值是一个原始值，则返回这个原始值。</li><li>否则，抛出 TypeError 异常。</li></ol><p>既然 <code>PreferredType</code> 是可选参数，那么如果没有这个参数时，怎么转换呢？<code>PreferredType</code> 的值会按照这样的规则来自动设置：</p><ol><li>该对象为 <code>Date</code> 类型，则 <code>PreferredType</code> 被设置为 <code>String</code></li><li>否则，<code>PreferredType</code> 被设置为 <code>Number</code></li></ol><h4 id="tostring-和-valueof" tabindex="-1">toString 和 valueOf <a class="header-anchor" href="#tostring-和-valueof" aria-label="Permalink to &quot;toString 和 valueOf&quot;">​</a></h4><p>那这两个方法在对象里是否一定存在呢？答案是肯定的。在控制台输出 <code>Object.prototype</code>，你会发现其中就有 <code>valueOf</code> 和 <code>toString</code> 方法，而 <code>Object.prototype</code> 是所有对象原型链顶层原型，所有对象都会继承该原型的方法，故任何对象都会有 <code>valueOf</code> 和 <code>toString</code> 方法。</p><p>先看看对象的 <code>valueOf</code> 函数，其转换结果是什么？对于 js 的常见内置对象：<code>Date</code>, <code>Array</code>, <code>Math</code>, <code>Number</code>, <code>Boolean</code>, <code>String</code>, <code>Array</code>, <code>RegExp</code>, <code>Function</code>。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Number、Boolean、String这三种构造函数生成的基础值的对象形式，</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// === 通过 valueOf 转换后会变成相应的原始值 ===</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">123</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">num</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">valueOf</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 123</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">String</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">12df</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">valueOf</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &#39;12df&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> bool </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Boolean</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fd</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">bool</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">valueOf</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Date特殊的对象，其原型Date.prototype上内置的valueOf函数将日期转换为日期的毫秒的形式的数值</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">valueOf</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 1515143895500</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 除此之外返回的都为this，即对象本身</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Array</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">valueOf</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">valueOf</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre></div><p>再来看看 <code>toString</code> 函数，其转换结果是什么</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">123sd</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">num</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &#39;NaN&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">String</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">12df</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &#39;12df&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> bool </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Boolean</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fd</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">bool</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &#39;true&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Array</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &#39;1,2&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> d </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">d</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &quot;Wed Oct 11 2017 08:00:00 GMT+0800 (中国标准时间)&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> func </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;">func</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &quot;function () {}&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 除这些对象及其实例化对象之外，其他对象返回的都是该对象的类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &quot;[object Object]&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &quot;[object Math]&quot;</span></span>
<span class="line"></span></code></pre></div><p>从上面 valueOf 和 toString 两个函数对对象的转换可以看出为什么对于 ToPrimitive(input, PreferredType?)，PreferredType 没有设定的时候，除了 Date 类型，PreferredType 被设置为 String，其它的会设置成 Number。</p><p>因为 valueOf 函数会将 Number、String、Boolean 基础类型的对象类型值转换成 基础类型，Date 类型转换为毫秒数，其它的返回对象本身，而 toString 方法会将所有对象转换为字符串。显然对于大部分对象转换，valueOf 转换更合理些，因为并没有规定转换类型，应该尽可能保持原有值，而不应该想 toString 方法一样，一股脑将其转换为字符串。</p><p>所以对于没有指定 PreferredType 类型时，先进行 valueOf 方法转换更好，故将 PreferredType 设置为 Number 类型。</p><p>而对于 Date 类型，其进行 valueOf 转换为毫秒数的 number 类型。在进行隐式转换时，没有指定将其转换为 number 类型时，将其转换为那么大的 number 类型的值显然没有多大意义。（不管是在+运算符还是==运算符）还不如转换为字符串格式的日期，所以默认 Date 类型会优先进行 toString 转换。故有以上的规则：</p><p>PreferredType 没有设置时，Date 类型的对象，PreferredType 默认设置为 String，其他类型对象 PreferredType 默认设置为 Number。</p><h3 id="通过-tonumber-将值转换为数字" tabindex="-1">通过 ToNumber 将值转换为数字 <a class="header-anchor" href="#通过-tonumber-将值转换为数字" aria-label="Permalink to &quot;通过 ToNumber 将值转换为数字&quot;">​</a></h3><p>根据参数类型进行下面转换：</p><table><thead><tr><th>参数</th><th>结果</th></tr></thead><tbody><tr><td>undefined</td><td>NaN</td></tr><tr><td>null</td><td>+0</td></tr><tr><td>布尔值</td><td>true 转换 1，false 转换为+0</td></tr><tr><td>数字</td><td>无须转换</td></tr><tr><td>字符串</td><td>有字符串解析为数字，例如：‘324’转换为 324，‘qwer’转换为 NaN</td></tr><tr><td>对象(obj)</td><td>先进行 ToPrimitive(obj, Number)转换得到原始值，在进行 ToNumber 转换为数字</td></tr></tbody></table><h3 id="通过-tostring-将值转换为字符串" tabindex="-1">通过 ToString 将值转换为字符串 <a class="header-anchor" href="#通过-tostring-将值转换为字符串" aria-label="Permalink to &quot;通过 ToString 将值转换为字符串&quot;">​</a></h3><table><thead><tr><th>参数</th><th>结果</th></tr></thead><tbody><tr><td>undefined</td><td>&#39;undefined&#39;</td></tr><tr><td>null</td><td>&#39;null&#39;</td></tr><tr><td>布尔值</td><td>转换为&#39;true&#39; 或 &#39;false&#39;</td></tr><tr><td>数字</td><td>数字转换字符串，比如：1.765 转为&#39;1.765&#39;</td></tr><tr><td>字符串</td><td>无须转换</td></tr><tr><td>对象(obj)</td><td>先进行 ToPrimitive(obj, String)转换得到原始值，在进行 ToString 转换为字符串</td></tr></tbody></table><p>讲了这么多，是不是还不是很清晰，先来看看一个例子：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">?</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">ans</p><p>两个对象的值进行+运算符，肯定要先进行隐式转换为原始类型才能进行计算。</p><ol><li>进行 ToPrimitive 转换，由于没有指定 PreferredType 类型，{}会使默认值为 Number，进行 ToPrimitive(input, Number)运算。</li><li>所以会执行 valueOf 方法，({}).valueOf(),返回的还是{}对象，不是原始值。</li><li>继续执行 toString 方法，({}).toString(),返回&quot;[object Object]&quot;，是原始值。</li></ol><p>故得到最终的结果，<code>&quot;[object Object]&quot; + &quot;[object Object]&quot; = &quot;[object Object][object object]&quot;</code></p></div><p>再来一个指定类型的例子：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">?</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">ans</p><ol><li>首先*运算符只能对 number 类型进行运算，故第一步就是对{}进行 ToNumber 类型转换。</li><li>由于{}是对象类型，故先进行原始类型转换，ToPrimitive(input, Number)运算。</li><li>所以会执行 valueOf 方法，({}).valueOf(),返回的还是{}对象，不是原始值。</li><li>继续执行 toString 方法，({}).toString(),返回&quot;[object Object]&quot;，是原始值。</li><li>转换为原始值后再进行 ToNumber 运算，&quot;[object Object]&quot;就转换为 NaN。</li></ol><p>故最终的结果为 <code>2 * NaN = NaN</code></p></div><h2 id="运算符隐式转换" tabindex="-1">== 运算符隐式转换 <a class="header-anchor" href="#运算符隐式转换" aria-label="Permalink to &quot;== 运算符隐式转换&quot;">​</a></h2><p>略 详见 - <a href="https://juejin.im/post/6844903557968166926" target="_blank" rel="noreferrer">你所忽略的 js 隐式转换</a></p>`,55),p=[e];function t(r,c,i,y,D,d){return a(),n("div",null,p)}const F=s(l,[["render",t]]);export{C as __pageData,F as default};
