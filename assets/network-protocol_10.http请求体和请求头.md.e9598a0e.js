import{_ as s,o as a,c as n,N as e}from"./chunks/framework.208f6f3f.js";const F=JSON.parse('{"title":"请求体以及 Accept","description":"","frontmatter":{"title":"请求体以及 Accept","date":"2018-09-18T13:00:28.000Z","sidebar":"auto","tags":["http"],"categories":["网络协议"]},"headers":[],"relativePath":"network-protocol/10.http请求体和请求头.md","lastUpdated":1681197872000}'),o={name:"network-protocol/10.http请求体和请求头.md"},l=e(`<h2 id="数据格式" tabindex="-1">数据格式 <a class="header-anchor" href="#数据格式" aria-label="Permalink to &quot;数据格式&quot;">​</a></h2><p>HTTP 它支持非常多的数据格式，那么这么多格式的数据一起到达客户端，客户端怎么知道它的格式呢？</p><p>具体体现在 <code>MIME</code>(Multipurpose Internet Mail Extensions, 多用途互联网邮件扩展)。它首先用在电子邮件系统中，让邮件可以发任意类型的数据，这对于 HTTP 来说也是通用的。</p><p>因此，HTTP 从 <code>MIME type</code> 取了一部分来标记报文 body 部分的数据类型，这些类型体现在 <code>Content-Type</code> 这个字段，当然这是针对于发送端而言，接收端想要收到特定类型的数据，也可以用 <code>Accept</code> 字段。</p><p>具体而言，这两个字段的取值可以分为下面几类:</p><ul><li><code>text</code>: text/html, text/plain, text/css 等</li><li><code>image</code>: image/gif, image/jpeg, image/png 等</li><li><code>audio/video</code>: audio/mpeg, video/mp4 等</li><li><code>application</code>: application/json, application/javascript, application/pdf, application/octet-stream</li></ul><h2 id="压缩方式" tabindex="-1">压缩方式 <a class="header-anchor" href="#压缩方式" aria-label="Permalink to &quot;压缩方式&quot;">​</a></h2><p>当然一般这些数据都是会进行编码压缩的，采取什么样的压缩方式就体现在了发送方的 <code>Content-Encoding</code> 字段上， 同样的，接收什么样的压缩方式体现在了接受方的 <code>Accept-Encoding</code> 字段上。这个字段的取值有下面几种：</p><ul><li>gzip：GNU zip 压缩格式，也是互联网上最流行的压缩格式；</li><li>deflate：zlib（deflate）压缩格式，流行程度仅次于 gzip；</li><li>br：一种专门为 HTTP 优化的新压缩算法（Brotli）。</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 发送端</span></span>
<span class="line"><span style="color:#A6ACCD;">Content</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Encoding</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> gzip</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 接收端</span></span>
<span class="line"><span style="color:#A6ACCD;">Accept</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Encoding</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> gzip</span></span>
<span class="line"></span></code></pre></div><h2 id="支持语言" tabindex="-1">支持语言 <a class="header-anchor" href="#支持语言" aria-label="Permalink to &quot;支持语言&quot;">​</a></h2><p>对于发送方而言，还有一个 <code>Content-Language</code> 字段，在需要实现国际化的方案当中，可以用来指定支持的语言，在接受方对应的字段为 <code>Accept-Language</code>。如:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 发送端</span></span>
<span class="line"><span style="color:#A6ACCD;">Content</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Language</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> zh</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">CN</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> zh</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> en</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 接收端</span></span>
<span class="line"><span style="color:#A6ACCD;">Accept</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Language</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> zh</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">CN</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> zh</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> en</span></span>
<span class="line"></span></code></pre></div><h2 id="字符集" tabindex="-1">字符集 <a class="header-anchor" href="#字符集" aria-label="Permalink to &quot;字符集&quot;">​</a></h2><p>最后是一个比较特殊的字段, 在接收端对应为 <code>Accept-Charset</code>，指定可以接受的字符集，而在发送端并没有对应的 <code>Content-Charset</code>, 而是直接放在了 <code>Content-Type</code> 中，以 <code>charset</code> 属性指定。如:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 发送端</span></span>
<span class="line"><span style="color:#A6ACCD;">Content</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> text</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">html</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> charset</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">utf</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">8</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 接收端</span></span>
<span class="line"><span style="color:#A6ACCD;">Accept</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Charset</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> charset</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">utf</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">8</span></span>
<span class="line"></span></code></pre></div><p>最后以一张图来总结一下吧:</p><p><img src="https://static001.geekbang.org/resource/image/b2/58/b2118315a977969ddfcc7ab9d26cb358.png" alt=""></p>`,18),p=[l];function t(c,i,r,d,y,C){return a(),n("div",null,p)}const A=s(o,[["render",t]]);export{F as __pageData,A as default};
