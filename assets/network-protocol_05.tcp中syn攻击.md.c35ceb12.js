import{_ as s,o as a,c as e,Q as o}from"./chunks/framework.2c915ec2.js";const N=JSON.parse('{"title":"半连接队列和 SYN Flood 攻击","description":"","frontmatter":{"title":"半连接队列和 SYN Flood 攻击","date":"2018-09-28T14:00:28.000Z","sidebar":"auto","tags":["tcp"],"categories":["网络协议"]},"headers":[],"relativePath":"network-protocol/05.tcp中syn攻击.md","lastUpdated":1716905716000}'),t={name:"network-protocol/05.tcp中syn攻击.md"},n=o(`<h2 id="半连接队列" tabindex="-1">半连接队列 <a class="header-anchor" href="#半连接队列" aria-label="Permalink to &quot;半连接队列&quot;">​</a></h2><p>三次握手时，服务器第一次收到客户端的 SYN 之后，就会处于 SYN_RCVD 状态，此时双方还没有完全建立其连接，服务器会把此种状态下请求连接放在一个队列里，我们把这种队列称之为半连接队列。</p><p>当然还有一个全连接队列，就是已经完成三次握手，建立起连接的就会放在全连接队列中。如果队列满了就有可能会出现丢包现象。</p><p>这里在补充一点关于 <strong>SYN-ACK 重传次数</strong>的问题： 服务器发送完 <code>SYN-ACK</code> 包，如果未收到客户确认包，服务器进行首次重传，等待一段时间仍未收到客户确认包，进行第二次重传。如果重传次数超过系统规定的最大重传次数，系统将该连接信息从半连接队列中删除。 注意，每次重传等待的时间不一定相同，一般会是指数增长，例如间隔时间为 1s，2s，4s，8s......</p><h2 id="syn-攻击" tabindex="-1">SYN 攻击 <a class="header-anchor" href="#syn-攻击" aria-label="Permalink to &quot;SYN 攻击&quot;">​</a></h2><p>服务器端的资源分配是在二次握手时分配的，而客户端的资源是在完成三次握手时分配的，所以服务器容易受到 <code>SYN 洪泛攻击</code>。</p><div class="warning custom-block"><p class="custom-block-title">SYN 攻击是一种典型的 DoS/DDoS 攻击。</p><p>SYN 攻击就是 Client 在短时间内伪造大量不存在的 IP 地址，并向 Server 不断地发送 SYN 包，Server 则回复确认包，并等待 Client 确认，由于源地址不存在，因此 Server 需要不断重发直至超时，这些伪造的 SYN 包将长时间占用未连接队列，导致正常的 SYN 请求因为队列满而被丢弃，从而引起网络拥塞甚至系统瘫痪。</p></div><p>检测 SYN 攻击非常的方便，当你在服务器上看到大量的半连接状态时，特别是源 IP 地址是随机的，基本上可以断定这是一次 SYN 攻击。在 <code>Linux/Unix</code> 上可以使用系统自带的 <code>netstats</code> 命令来检测 SYN 攻击。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">netstat</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-n</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">TCP</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">grep</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">SYN_RECV</span></span>
<span class="line"></span></code></pre></div><p>常见的防御 SYN 攻击的方法有如下几种：</p><ul><li>缩短超时（SYN Timeout）时间</li><li>增加最大半连接数</li><li>过滤网关防护</li><li>SYN cookies 技术</li></ul>`,11),l=[n];function p(c,r,i,d,_,S){return a(),e("div",null,l)}const Y=s(t,[["render",p]]);export{N as __pageData,Y as default};
