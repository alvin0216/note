import{_ as s,o as a,c as n,N as p}from"./chunks/framework.208f6f3f.js";const A=JSON.parse('{"title":"原型和原型链","description":"","frontmatter":{"title":"原型和原型链","date":"2019-07-17T13:00:28.000Z","sidebar":"auto","tags":["Javascript","原型和原型链"],"categories":["Javascript"]},"headers":[],"relativePath":"javascript/prototype.md","lastUpdated":1682518848000}'),o={name:"javascript/prototype.md"},l=p(`<ul><li><a href="https://github.com/mqyqingfeng/Blog/issues/2" target="_blank" rel="noreferrer">冴羽 JavaScript 深入之从原型到原型链</a></li><li><a href="https://juejin.cn/post/6844903976907997192" target="_blank" rel="noreferrer">【重点】图解：告诉面试官什么是 JS 原型和原型链?</a></li></ul><p>每个函数都有一个特殊的属性叫作原型, <code>prototype</code>, 用于存放共享的属性和方法。怎么共享呢？</p><p>通过 new 一个构造函数生成实例，该实例通过 <code>__proto__</code> 指向该构造函数的原型，那么访问实例属性的时候先在实例上找，如果找不到会往构造函数的原型上找，这也就是原型链。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">run Person</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> p </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 构造函数、实例原型、和实例之间的关系</span></span>
<span class="line"><span style="color:#F78C6C;">1.</span><span style="color:#A6ACCD;"> Person 指代构造函数</span></span>
<span class="line"><span style="color:#F78C6C;">2.</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype 指向原型对象</span></span>
<span class="line"><span style="color:#F78C6C;">3.</span><span style="color:#A6ACCD;"> p</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype 实例通过 __proto__ （原型链）指向原型</span></span>
<span class="line"></span></code></pre></div><p><img src="https://alvin-cdn.oss-cn-shenzhen.aliyuncs.com/images/prototype5.png" alt=""></p>`,5),e=[l];function t(r,c,y,i,D,C){return a(),n("div",null,e)}const _=s(o,[["render",t]]);export{A as __pageData,_ as default};
