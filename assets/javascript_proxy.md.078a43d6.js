import{_ as e,o,c as r,N as t}from"./chunks/framework.208f6f3f.js";const g=JSON.parse('{"title":"Proxy","description":"","frontmatter":{"title":"Proxy","date":"2022-05-16T22:19:10.000Z","sidebar":"auto","tags":["Proxy"],"categories":["Javascript"]},"headers":[],"relativePath":"javascript/proxy.md","lastUpdated":1681197312000}'),s={name:"javascript/proxy.md"},p=t(`<ol><li>知道 <code>proxy</code> 吗</li><li>为什么 <code>vue</code> 用 <code>proxy</code> 取代 <code>defineProperty</code></li></ol><h2 id="defineproperty-的缺点" tabindex="-1">defineProperty 的缺点 <a class="header-anchor" href="#defineproperty-的缺点" aria-label="Permalink to &quot;defineProperty 的缺点&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">age</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">get</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">set</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>上面的使用中，我们只监听了一个属性的变化.，但是在实际情况中，我们通常需要一次监听多个属性的变化。</p><ul><li><code>defineProperty</code> 无法对新增的属性进行劫持。 <ul><li>vue2 的话重写了数组方法才可以的。如果需要对新属性监听，可以通过 <code>$set</code></li></ul></li><li><code>defineProperty</code> 一次只能对一个属性进行监听，需要遍历来对所有属性监听。深度监听一个对象性能开销大（递归）</li></ul><p><code>Object.definePorperty()</code> 进行数据监听是比较麻烦的，需要大量的手动处理。这也是为什么在 <code>Vue3.0</code> 中尤雨溪转而采用 <code>Proxy</code>。</p><h2 id="proxy-支持-13-种拦截操作" tabindex="-1">Proxy 支持 13 种拦截操作 <a class="header-anchor" href="#proxy-支持-13-种拦截操作" aria-label="Permalink to &quot;Proxy 支持 13 种拦截操作&quot;">​</a></h2><p>除了 get 和 set 来拦截读取和赋值操作之外，Proxy 还支持对其他多种行为的拦截。下面是一个简单介绍，想要深入了解的可以去 MDN 上看看。</p><ol><li>get(target, propKey, receiver)：拦截对象属性的读取，比如 proxy.foo 和 proxy[&#39;foo&#39;]。</li><li>set(target, propKey, value, receiver)：拦截对象属性的设置，比如 proxy.foo = v 或 proxy[&#39;foo&#39;] = v，返回一个布尔值。</li><li>has(target, propKey)：拦截 propKey in proxy 的操作，返回一个布尔值。</li><li>deleteProperty(target, propKey)：拦截 delete proxy[propKey]的操作，返回一个布尔值。</li><li>ownKeys(target)：拦截 Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for...in 循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而 Object.keys()的返回结果仅包括目标对象自身的可遍历属性。</li><li>getOwnPropertyDescriptor(target, propKey)：拦截 Object.getOwnPropertyDescriptor(proxy, propKey)，返回属性的描述对象。</li><li>defineProperty(target, propKey, propDesc)：拦截 Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回一个布尔值。</li><li>preventExtensions(target)：拦截 Object.preventExtensions(proxy)，返回一个布尔值。</li><li>getPrototypeOf(target)：拦截 Object.getPrototypeOf(proxy)，返回一个对象。</li><li>isExtensible(target)：拦截 Object.isExtensible(proxy)，返回一个布尔值。</li><li>setPrototypeOf(target, proto)：拦截 Object.setPrototypeOf(proxy, proto)，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。</li><li>apply(target, object, args)：拦截 Proxy 实例作为函数调用的操作，比如 proxy(...args)、proxy.call(object, ...args)、proxy.apply(...)。</li><li>construct(target, args)：拦截 Proxy 实例作为构造函数调用的操作，比如 new proxy(...args)。</li></ol>`,9),a=[p];function l(n,c,y,i,d,D){return o(),r("div",null,a)}const P=e(s,[["render",l]]);export{g as __pageData,P as default};
