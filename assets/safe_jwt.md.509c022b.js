import{_ as t,o as a,c as e,Q as l}from"./chunks/framework.20999013.js";const T=JSON.parse('{"title":"JWT","description":"","frontmatter":{"title":"JWT","date":"2020-06-10T16:01:15.000Z"},"headers":[],"relativePath":"safe/jwt.md","lastUpdated":1717399453000}'),o={name:"safe/jwt.md"},i=l('<p><a href="https://jwt.io/" target="_blank" rel="noreferrer">https://jwt.io/</a></p><p><img src="https://alvin-cdn.oss-cn-shenzhen.aliyuncs.com/images/jwt.png" alt=""></p><h2 id="组成" tabindex="-1">组成 <a class="header-anchor" href="#组成" aria-label="Permalink to &quot;组成&quot;">​</a></h2><p><strong>Header.Payload.Signature</strong></p><ul><li><strong>Header</strong>: 头部通常由两部分组成，即令牌的类型（typ）和所使用的算法（alg）。例如，一个头部可能是 {&quot;alg&quot;: &quot;HS256&quot;, &quot;typ&quot;: &quot;JWT&quot;}，表示使用 HMAC SHA-256 算法对令牌进行签名。</li><li><strong>Payload</strong>: 载荷包含了 JWT 的声明信息，用于描述令牌的相关内容。比如可以存储一些用户的基本信息。</li><li><strong>Signature</strong>: 签名用于验证令牌的完整性和真实性。签名通常由头部、载荷和密钥一起计算而得。</li></ul><h2 id="优缺点" tabindex="-1">优缺点 <a class="header-anchor" href="#优缺点" aria-label="Permalink to &quot;优缺点&quot;">​</a></h2><p>JWT 的优点</p><ul><li>无状态性：JWT 是无状态的，服务器不需要在后端存储会话信息，减轻了服务器负担。</li><li>安全性：JWT  使用签名来验证令牌的真实性，防止了篡改和伪造。</li><li>可扩展性：JWT  可以通过在  Payload  中添加自定义的声明来传递任意数据，实现了更多的功能。</li><li>跨语言：JWT 是一种跨语言的标准，因为它使用  JSON  格式作为数据载体，并且它的标准规范是语言无关的。这意味着无论使用哪种编程语言编写的应用程序，都可以轻松地生成和解析  JWT。</li></ul><p>JWT 的缺点</p><ul><li>无法撤销令牌：一旦颁发了  JWT，就无法在令牌的有效期内撤销它。即使用户的权限发生变化或者令牌被泄露，令牌也仍然有效，直到过期时间到期为止。</li><li>安全性依赖于签名算法：JWT  的安全性取决于签名算法的强度。如果使用了弱算法或者密钥管理不当，可能会导致签名被破解，从而使得  JWT  变得不安全。</li><li>无法处理令牌刷新：JWT  本身不提供令牌刷新功能，需要额外的机制来实现。这使得在令牌到期后，客户端需要重新进行身份验证，可能会增加一定的复杂性。</li><li>不适合存储敏感信息：JWT  虽然可以对  Payload  进行加密，但是加密后的  Payload  仍然可以被解析出来。因此，不建议在  JWT  中存储敏感信息，如密码等。</li></ul><h2 id="如何撤销-jwt" tabindex="-1">如何撤销 JWT <a class="header-anchor" href="#如何撤销-jwt" aria-label="Permalink to &quot;如何撤销 JWT&quot;">​</a></h2><p>通常和后端协同 RefreshToken 来主动刷新令牌权限</p>',12),r=[i];function s(n,d,c,p,u,_){return a(),e("div",null,r)}const J=t(o,[["render",s]]);export{T as __pageData,J as default};
