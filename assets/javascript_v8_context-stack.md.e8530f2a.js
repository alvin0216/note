import{_ as s,o as a,c as n,N as l}from"./chunks/framework.208f6f3f.js";const A=JSON.parse('{"title":"什么是执行上下文栈？","description":"","frontmatter":{"title":"什么是执行上下文栈？","date":"2020-06-16T20:31:29.000Z","sidebar":"auto","tags":["Javascript","v8 引擎","执行上下文"],"categories":["Javascript"]},"headers":[],"relativePath":"javascript/v8/context-stack.md","lastUpdated":1681197872000}'),o={name:"javascript/v8/context-stack.md"},p=l(`<h2 id="执行上下文栈的构成" tabindex="-1">执行上下文栈的构成 <a class="header-anchor" href="#执行上下文栈的构成" aria-label="Permalink to &quot;执行上下文栈的构成&quot;">​</a></h2><p>JavaScript 代码的执行流程的第一步就是编译阶段：创建 <code>执行上下文</code> 和 <code>可执行代码</code>。</p><div class="tip custom-block"><p class="custom-block-title">JavaScript 的可执行代码(executable code)的类型有哪些了？</p><p>其实很简单，就三种，<strong>全局代码、函数代码、eval 代码</strong>。</p></div><p>当执行到一个函数的时候，就会进行准备工作，这里的“准备工作”，让我们用个更专业一点的说法，就叫做&quot;<strong>执行上下文(execution context)</strong>&quot;</p><p>所以 JavaScript 引擎创建了执行上下文栈（Execution context stack，ECS）来管理执行上下文。</p><p>在执行上下文创建好后，JavaScript 引擎会将执行上下文压入栈中。这里列举一个例子：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">c</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">addAll</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">c</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">d</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">add</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">c</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">d</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">addAll</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>JS 执行代码后产生的执行上下文栈如图所示：</p><p><img src="https://alvin-cdn.oss-cn-shenzhen.aliyuncs.com/images/ec-stack1.png" alt=""></p><ul><li>第一步，创建全局上下文，并将其压入栈底。</li><li>第二步，是调用 <code>addAll</code> 函数。为 <code>addAll</code> 创建执行上下文栈并押入栈中。</li><li>第三步，在 <code>addAll</code> 函数中执行了 <code>add</code> 函数，为 <code>add</code> 创建执行上下文栈并押入栈中。</li><li>当 <code>add</code> 执行完毕并返回时，<code>add</code> 函数出栈，以此类推。当整个应用程序结束的时候，栈才被清空。</li></ul><h2 id="如何在浏览器中查看调用栈" tabindex="-1">如何在浏览器中查看调用栈 <a class="header-anchor" href="#如何在浏览器中查看调用栈" aria-label="Permalink to &quot;如何在浏览器中查看调用栈&quot;">​</a></h2><p>:::: tabs</p><p>::: tab 打断点 <img src="https://alvin-cdn.oss-cn-shenzhen.aliyuncs.com/images/ec-stack2.png" alt=""> :::</p><p>::: tab 使用 console.trace() 来输出当前的函数调用关系 <img src="https://alvin-cdn.oss-cn-shenzhen.aliyuncs.com/images/ec-stack3.png" alt=""> :::</p><p>::::</p>`,15),t=[p];function e(c,r,y,i,F,D){return a(),n("div",null,t)}const C=s(o,[["render",e]]);export{A as __pageData,C as default};
